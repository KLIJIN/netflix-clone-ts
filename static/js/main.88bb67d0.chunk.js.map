{"version":3,"sources":["requests.ts","Components/Banner.tsx","Components/Row.tsx","Components/Nav.tsx","App.tsx","index.tsx"],"names":["requests","fetchTrending","process","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","useState","movie","setMovie","style","backgroundImage","backdrop_path","fetchData2","a","fetch","response","json","body","results","Math","floor","random","length","useEffect","console","log","className","title","name","original_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","handleClick","id","key","fetchUrl_full","fetchData","map","src","poster_path","alt","onClick","bind","videoId","opts","height","width","playerVars","autoplay","Nav","show","setShow","window","addEventListener","scrollY","removeEventListener","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.88bb67d0.chunk.js","sourcesContent":["//You work is awesome! But you don't put API_KEY in src file it's not good, you must use .env\r\n//\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${process.env.REACT_APP_API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"../axios/axios\";\r\nimport requests from \"../requests\";\r\nimport { movieType } from \"../types\";\r\n\r\nconst Banner: React.FC = () => {\r\n  const [movie, setMovie] = useState<movieType>();\r\n  const style = {\r\n    backgroundImage: `url(\"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\")`,\r\n  };\r\n\r\n  // async function fetchData() {\r\n  //   const response = await axios.get(requests.fetchNetflixOriginals);\r\n  //   console.log(\"Banner fetchData\", response.data);\r\n  //   const { results } = response.data;\r\n  //   console.log(results);\r\n  //   // setMovie(response.data.results[Math.floor(Math.random() * response.data.results.length)]);\r\n  // }\r\n\r\n  const fetchData2 = async (): Promise<movieType[]> => {\r\n    const response = await fetch(`https://api.themoviedb.org/3${requests.fetchNetflixOriginals}`);\r\n    // console.log(\"fetchData2 -->\", response);\r\n    const body = await response.json();\r\n    //console.log(\"fetchData2 -->\", body.results);\r\n    setMovie(body.results[Math.floor(Math.random() * body.results.length)]);\r\n    return body.results;\r\n  };\r\n\r\n  useEffect(() => {\r\n    // fetchData();\r\n    fetchData2();\r\n  }, []);\r\n\r\n  console.log(\"movie\", movie);\r\n  function truncate(str: string, n: number) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \" ...\" : str;\r\n    //если текст больше определенного количества знаков, то он автоматически обрезается до нужной длинны.\r\n  }\r\n\r\n  return (\r\n    <header className=\"banner\" style={style}>\r\n      <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List </button>\r\n        </div>\r\n        <h1 className=\"banner__description\">\r\n          {movie?.overview && truncate(movie.overview, 100)} {/* встроенная проверка на существование свойства, аналог записи выше */}\r\n          {/* {truncate(movie?.overview, 100)} */}\r\n        </h1>\r\n        <div className=\"banner--fadeBottom\"> </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\nexport default Banner;\r\n","import { useState, useEffect, FC } from \"react\";\r\nimport Youtube, { Options } from \"react-youtube\";\r\nimport { movieType, movePrewiewType } from \"../types\";\r\n\r\n\r\nconst baseImgUrl = \"https://image.tmdb.org/t/p/original\";\r\nconst url = \"https://api.themoviedb.org/3\";\r\n\r\n\r\ninterface RowProps {\r\n  title: string;\r\n  fetchUrl: string;\r\n  isLargeRow?: boolean;\r\n}\r\n\r\nconst Row: FC<RowProps> = ({ title, fetchUrl, isLargeRow }) => {\r\n  const [movies, setMovies] = useState<movieType[]>([]);\r\n  const [trailerUrl, setTrailerUrl] = useState<string>(\"\");\r\n\r\n  // Options for react-youtube\r\n  const opts: Options = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n\r\n  };\r\n\r\n\r\n  const handleClick = async (movie: movieType): Promise<void> => {\r\n    console.log(\"click\")\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      const response = await fetch(`https://api.themoviedb.org/3/movie/${movie?.id}/videos?api_key=${process.env.REACT_APP_API_KEY}`);\r\n      const body = await response.json();\r\n      console.log(\"handleClick-2\", body)\r\n      setTrailerUrl(body.results[0]?.key);\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchUrl_full = `${url}${fetchUrl}`;\r\n    async function fetchData(): Promise<movePrewiewType[]> {\r\n      const response = await fetch(fetchUrl_full);\r\n      const body = await response.json();\r\n      setMovies(body.results);\r\n      return body.results\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => {\r\n          return <img\r\n            key={movie.id}\r\n            className={`row__poster ${isLargeRow ? \"row__posterLarge\" : \"\"}`}\r\n            src={`${baseImgUrl}${isLargeRow ? movie?.poster_path : movie?.backdrop_path}`}\r\n            alt={movie.name}\r\n            onClick={handleClick.bind(this, movie)}\r\n          />;\r\n        })}\r\n      </div>\r\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nconst Nav: React.FC = () => {\r\n  const [show, setShow] = useState<boolean>();\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        setShow(true);\r\n      } else {\r\n        setShow(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", () => {\r\n        if (window.scrollY > 100) {\r\n          setShow(true);\r\n        } else {\r\n          setShow(false);\r\n        }\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show ? \"nav__black\" : \"\"}`}>\r\n      <img className=\"nav__logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\" alt=\"Netflix Logo\" />\r\n      <img className=\"nav__avatar\" src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\" alt=\"Avatar\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React, { FC } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport requests from \"./requests\";\n\nimport Banner from \"./Components/Banner\";\nimport Row from \"./Components/Row\";\nimport Nav from \"./Components/Nav\";\n\nconst App: FC = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <Banner />\n        <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} isLargeRow={true} />\n        <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n        <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n        <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n        <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n        <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n        <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport \"./style/style.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}